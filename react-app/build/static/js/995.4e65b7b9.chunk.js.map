{"version":3,"file":"static/js/995.4e65b7b9.chunk.js","mappings":"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","sources":["components/Breadcrumb/Breadcrumb.js","components/Form/ErrorMEssage.js","components/Form/Input.js","components/Form/Submit.js","redux/project/action.js","hooks/project/index.js","pages/Project/ProjectForm/ProjectFormValidation.js","pages/Project/ProjectForm/ProjectForm.js","pages/Project/ProjectForm/index.js"],"sourcesContent":["import { Fragment } from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\n\nconst Breadcrumb = ({\n  breadcrumb,\n  title,\n  showButton,\n  buttonAction,\n  buttonText,\n}) => (\n  <div className=\"page-breadcrumb\">\n    <div className=\"row align-items-center\">\n      <div className=\"col-6\">\n        <nav aria-label=\"breadcrumb\">\n          <ol className=\"breadcrumb mb-0 d-flex align-items-center\">\n            {breadcrumb.map((b, key) => (\n              <Fragment key={key}>\n                {b.url && (\n                  <li className=\"breadcrumb-item\">\n                    <Link to={b.url} className=\"link\">\n                      {b.icon && <i className={b.icon}></i>}\n                      {b.icon && ' '}\n                      {b.name}\n                    </Link>\n                  </li>\n                )}\n                {!b.url && <li className=\"breadcrumb-item active\">{b.name}</li>}\n              </Fragment>\n            ))}\n          </ol>\n        </nav>\n        {title ? <h1 className=\"mb-0 fw-bold\">{title}</h1> : null}\n      </div>\n      <div className=\"col-6\">\n        {showButton ? (\n          <div className=\"text-end upgrade-btn\">\n            <Link to={buttonAction} className=\"btn btn-primary text-white\">\n              {buttonText}\n            </Link>\n          </div>\n        ) : null}\n      </div>\n    </div>\n  </div>\n)\n\nexport default Breadcrumb\n\nBreadcrumb.defaultProps = {\n  breadcrumb: [],\n  title: '',\n  showButton: false,\n}\n\nBreadcrumb.propTypes = {\n  title: PropTypes.string,\n  breadcrumb: PropTypes.array,\n  className: PropTypes.string,\n  showButton: PropTypes.bool,\n  buttonAction: PropTypes.func,\n  buttonText: PropTypes.string,\n}\n","import PropTypes from 'prop-types'\n\nconst ErrorMEssage = ({error}) => error && <p className=\"text-danger mb-1\">{error.message}</p>\n\nexport default ErrorMEssage\n\nErrorMEssage.propTypes = {\n  error: PropTypes.object,\n}\n","import { forwardRef } from 'react';\nimport PropTypes from 'prop-types'\nimport ErrorMEssage from './ErrorMEssage';\n\nconst Input = forwardRef(({\n  type = 'text',\n  onChange,\n  placeholder,\n  name,\n  errors,\n  disabled = false\n}, ref) => (\n  <>\n    <input\n      ref={ref}\n      id={name}\n      name={name}\n      onChange={onChange}\n      type={type}\n      className={errors[name] ? 'form-control border border-danger' : 'form-control'}\n      placeholder={placeholder}\n      disabled={disabled}\n    />\n    <ErrorMEssage error={errors[name]} />\n  </>\n));\n\nInput.defaultProps = {\n}\n\nInput.propTypes = {\n  type: PropTypes.string,\n  onChange: PropTypes.func,\n  placeholder: PropTypes.string,\n  name: PropTypes.string,\n  errors: PropTypes.object,\n  disabled: PropTypes.bool,\n}\n\nInput.displayName = 'Input'\n\nexport default Input\n","import PropTypes from 'prop-types'\n\nconst Submit = ({label, loading, className = ''}) => (\n  <>\n    <button\n      type=\"submit\"\n      className={`submit-btn${className ? (' ' + className) : ''}`}\n      disabled={loading}\n    >\n      {label}\n      {loading ? (\n        <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\n      ) : ''}\n    </button>\n  </>\n);\n\nexport default Submit\n\nSubmit.defaultProps = {}\n\nSubmit.propTypes = {\n  label: PropTypes.string,\n  loading: PropTypes.bool,\n  className: PropTypes.string,\n}\n","import {\n  GET_PROJECTS_REQUEST,\n  CREATE_PROJECT_REQUEST,\n  RESET_PROJECT,\n  GET_PROJECT_DETAIL_REQUEST,\n  UPDATE_PROJECT_REQUEST,\n  DELETE_PROJECT_REQUEST,\n} from '../../constants/actionTypes';\n\nexport const getProjects = query => ({\n  type: GET_PROJECTS_REQUEST,\n  payload: query\n});\n\nexport const createProjectRequest = param => ({\n  type: CREATE_PROJECT_REQUEST,\n  payload: param\n});\n\nexport const resetProjectState = () => ({\n  type: RESET_PROJECT,\n});\n\nexport const getProjectDetailRequest = (param) => ({\n  type: GET_PROJECT_DETAIL_REQUEST,\n  payload: param\n});\n\nexport const updateProjectRequest = (param) => ({\n  type: UPDATE_PROJECT_REQUEST,\n  payload: param\n});\n\nexport const deleteProjectRequest = (param) => ({\n  type: DELETE_PROJECT_REQUEST,\n  payload: param\n});\n","import { useMemo } from 'react';\r\nimport {\r\n  useFailed,\r\n  useFetchByParam,\r\n  useQueryParams,\r\n  useSubmit,\r\n  useSuccess,\r\n  useResetState\r\n} from '../utils';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {\r\n  getProjects,\r\n  createProjectRequest,\r\n  resetProjectState,\r\n  getProjectDetailRequest,\r\n  updateProjectRequest,\r\n  deleteProjectRequest,\r\n} from '../../redux/project/action';\r\nimport Api from 'api'\r\n\r\nconst getSelector = key => state => state.project[key];\r\n\r\nconst loadingSelector = getSelector('isLoading');\r\nconst listSelector = getSelector('list');\r\nconst paramsSelector = getSelector('listParams');\r\nconst getListFailedSelector = getSelector('getListFailed');\r\n\r\nconst itemSelector = getSelector('item');\r\nconst getItemFailedSelector = getSelector('getItemFailed');\r\n\r\nconst createSuccessSelector = getSelector('createSuccess');\r\nconst createFailedSelector = getSelector('createFailed');\r\n\r\nconst updateSuccessSelector = getSelector('updateSuccess');\r\nconst updateFailedSelector = getSelector('updateFailed');\r\n\r\nconst deleteSuccessSelector = getSelector('deleteSuccess');\r\nconst deleteFailedSelector = getSelector('deleteFailed');\r\n\r\nexport const useProjectsQueryParams = () => {\r\n  const query = useQueryParams();\r\n  const page = query.get('page') || 1;\r\n  const per_page = query.get('per_page') || 10;\r\n\r\n  return useMemo(() => {\r\n    return {\r\n      page,\r\n      per_page,\r\n      order_by_created_at: 'desc',\r\n    };\r\n    //eslint-disable-next-line\r\n  }, [page, per_page]);\r\n};\r\n\r\nexport const useProjects = (param) => {\r\n  return useFetchByParam({\r\n    action: getProjects,\r\n    loadingSelector,\r\n    dataSelector: listSelector,\r\n    failedSelector: getListFailedSelector,\r\n    param\r\n  });\r\n};\r\n\r\nexport const asyncProjects = (param) => {\r\n  return Api.project.getAll(param)\r\n    .then(res => Promise.resolve(res.data))\r\n};\r\n\r\nexport const useProjectsResParams = () => {\r\n  return useSelector(paramsSelector)\r\n};\r\n\r\nexport const useInitProject = (project) => {\r\n  return useMemo(() => {\r\n    return {\r\n      id: project?.id || null,\r\n      name: project?.name || '',\r\n      giturl: project?.giturl || '',\r\n      description: project?.description || '',\r\n    }\r\n  }, [project])\r\n}\r\n\r\nexport const useCreateProject = () => {\r\n  const navigate = useNavigate();\r\n  const [isLoading, handleSubmit] = useSubmit({\r\n    loadingSelector,\r\n    action: createProjectRequest\r\n  });\r\n\r\n  const successCallback = () => navigate(\"/project\");\r\n\r\n  useSuccess(createSuccessSelector, 'Create project success', successCallback);\r\n  useFailed(createFailedSelector, 'Create project Failed');\r\n\r\n  return [isLoading, handleSubmit];\r\n}\r\n\r\nexport const useUpdateProject = () => {\r\n  const navigate = useNavigate();\r\n  const [isLoading, handleSubmit] = useSubmit({\r\n    loadingSelector,\r\n    action: updateProjectRequest\r\n  });\r\n\r\n  const successCallback = () => navigate(\"/project\");\r\n\r\n  useSuccess(updateSuccessSelector, 'Update project success', successCallback);\r\n  useFailed(updateFailedSelector, 'Update project Failed');\r\n\r\n  return [isLoading, handleSubmit];\r\n}\r\n\r\nexport const useResetProject = () => {\r\n  useResetState(resetProjectState);\r\n};\r\n\r\nexport const useProjectDetail = (param) => {\r\n  return useFetchByParam({\r\n    action: getProjectDetailRequest,\r\n    loadingSelector,\r\n    dataSelector: itemSelector,\r\n    failedSelector: getItemFailedSelector,\r\n    param\r\n  });\r\n};\r\n\r\nexport const useDeleteProject = (params) => {\r\n  const dispatch = useDispatch();\r\n  const [isLoading, handleSubmit] = useSubmit({\r\n    loadingSelector,\r\n    action: deleteProjectRequest\r\n  });\r\n\r\n  const successCallback = () => {dispatch(getProjects(params))}\r\n\r\n  useSuccess(deleteSuccessSelector, 'Delete project success', successCallback);\r\n  useFailed(deleteFailedSelector, 'Delete project Failed');\r\n\r\n  return [isLoading, handleSubmit];\r\n}\r\n","import * as yup from \"yup\";\r\n\r\nconst schema = yup.object().shape({\r\n  name: yup.string()\r\n    .required(\"The project name field is required\")\r\n    .max(255, 'The project name may not be greater than 255 characters.'),\r\n  giturl: yup.string()\r\n    .required(\"The git url field is required\")\r\n    .max(255, 'The git url may not be greater than 255 characters.'),\r\n  description: yup.string().required(\"The description field is required\"),\r\n});\r\n\r\nexport default schema\r\n","import { useEffect } from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n\r\nimport {\r\n  useInitProject,\r\n  useCreateProject,\r\n  useResetProject,\r\n  useUpdateProject,\r\n} from 'hooks/project';\r\n\r\nimport Input from 'components/Form/Input';\r\nimport Submit from 'components/Form/Submit';\r\n\r\nimport ProjectFormValidation from './ProjectFormValidation';\r\n\r\nfunction ProjectForm({project}) {\r\n  const defaultValues = useInitProject(project)\r\n  useResetProject()\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    setError,\r\n    formState: { errors },\r\n    reset,\r\n  } = useForm({\r\n    defaultValues: defaultValues,\r\n    resolver: yupResolver(ProjectFormValidation)\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (project) {\r\n      reset(defaultValues)\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [project])\r\n\r\n  const [loadingSubmit, onSubmit] = useCreateProject({setError});\r\n  const [loadingUpdate, onUpdate] = useUpdateProject({setError});\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(project ? onUpdate : onSubmit)}>\r\n      <div className=\"row mb-3\">\r\n        <div className=\"col-sm-4\">\r\n          Project name <span className=\"text-danger\">*</span>\r\n        </div>\r\n        <div className=\"col-sm-8\">\r\n          <Input\r\n            {...register('name')}\r\n            placeholder=\"Name\"\r\n            errors={errors}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"row mb-3\">\r\n        <div className=\"col-sm-4\">\r\n          Git url <span className=\"text-danger\">*</span>\r\n        </div>\r\n        <div className=\"col-sm-8\">\r\n          <Input\r\n            {...register('giturl')}\r\n            placeholder=\"Git url\"\r\n            errors={errors}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"row mb-3\">\r\n        <div className=\"col-sm-4\">\r\n          Description\r\n        </div>\r\n        <div className=\"col-sm-8\">\r\n          <textarea rows=\"5\" className=\"form-control\" {...register('description')}></textarea>\r\n        </div>\r\n      </div>\r\n      <hr />\r\n      <div className=\"row\">\r\n        <div className=\"col text-end\">\r\n          <Submit\r\n            loading={project ? loadingUpdate : loadingSubmit}\r\n            className=\"btn btn-primary text-white\"\r\n            label={project ? \"Update\" : \"Create\"}\r\n          />\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default ProjectForm;\r\n\r\nProjectForm.defaultProps = {}\r\n\r\nProjectForm.propTypes = {\r\n  project: PropTypes.object,\r\n}\r\n","import { Fragment } from 'react';\r\nimport { useParams } from 'react-router-dom'\r\n\r\nimport { useProjectDetail } from 'hooks/project';\r\n\r\nimport ProjectForm from './ProjectForm'\r\nimport Breadcrumb from \"components/Breadcrumb\"\r\nimport LoadingScreen from \"components/LoadingScreen\"\r\n\r\nconst breadcrumbCreate = [\r\n  {name: '', url: '/', icon: 'mdi mdi-home-outline fs-4'},\r\n  {name: 'Project', url: '/project', icon: null},\r\n  {name: 'Create', url: null, icon: null},\r\n]\r\n\r\nconst breadcrumbEdit = [\r\n  {name: '', url: '/', icon: 'mdi mdi-home-outline fs-4'},\r\n  {name: 'Project', url: '/project', icon: null},\r\n  {name: 'Edit', url: null, icon: null},\r\n]\r\n\r\nfunction ProjectFormPage() {\r\n  const params = useParams()\r\n  const [project, isLoading] = useProjectDetail(params.id ? params : null);\r\n\r\n  if (isLoading) {\r\n    return <LoadingScreen />\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Breadcrumb\r\n        breadcrumb={params.id ? breadcrumbEdit : breadcrumbCreate}\r\n        title={params.id ? \"Project Edit\" : \"Project Create\"}\r\n      />\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row\">\r\n          <div className=\"col-12\">\r\n            <div className=\"card\">\r\n              <div className=\"card-body\">\r\n                <h4 className=\"card-title\">\r\n                  {params.id ? \"Project Edit\" : \"Create new project\"}\r\n                </h4>\r\n                <hr />\r\n                <ProjectForm project={project} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default ProjectFormPage;\r\n"],"names":["Breadcrumb","breadcrumb","title","showButton","buttonAction","buttonText","className","map","b","key","Fragment","url","to","icon","name","defaultProps","error","message","Input","forwardRef","ref","type","onChange","placeholder","errors","disabled","id","propTypes","PropTypes","displayName","Submit","label","loading","role","getProjects","query","GET_PROJECTS_REQUEST","payload","createProjectRequest","param","CREATE_PROJECT_REQUEST","resetProjectState","RESET_PROJECT","getProjectDetailRequest","GET_PROJECT_DETAIL_REQUEST","updateProjectRequest","UPDATE_PROJECT_REQUEST","deleteProjectRequest","DELETE_PROJECT_REQUEST","getSelector","state","project","loadingSelector","listSelector","paramsSelector","getListFailedSelector","itemSelector","getItemFailedSelector","createSuccessSelector","createFailedSelector","updateSuccessSelector","updateFailedSelector","deleteSuccessSelector","deleteFailedSelector","useProjectsQueryParams","useQueryParams","page","get","per_page","useMemo","order_by_created_at","useProjects","useFetchByParam","action","dataSelector","failedSelector","useProjectsResParams","useSelector","useInitProject","giturl","description","useCreateProject","navigate","useNavigate","useSubmit","isLoading","handleSubmit","useSuccess","useFailed","useUpdateProject","useResetProject","useResetState","useProjectDetail","useDeleteProject","params","dispatch","useDispatch","yup","shape","required","max","ProjectForm","defaultValues","useForm","resolver","yupResolver","ProjectFormValidation","register","setError","formState","reset","useEffect","loadingSubmit","onSubmit","loadingUpdate","onUpdate","rows","breadcrumbCreate","breadcrumbEdit","useParams","LoadingScreen"],"sourceRoot":""}